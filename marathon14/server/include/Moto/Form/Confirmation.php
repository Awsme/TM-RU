<?phpclass Moto_Form_Confirmation{	protected $prefix;	protected $_tablePrefix = 'custom_';	protected $_tableNameForm = 'form';	protected $_tableNameConfirmation = 'form_confirmation';	protected $_inited = false;	protected $_forms = array();	protected $_db = null;	/**	 * Initialize the engine	 */	public function init()	{		if ($this->_inited)			return;		$this->_db = Database::instance();		Database::instance()->query("			CREATE TABLE IF NOT EXISTS {$this->prefix}{$this->_tablePrefix}{$this->_tableNameForm} (			  `id` mediumint(8) unsigned NOT NULL AUTO_INCREMENT,			  `ref_name` varchar(24) NOT NULL,			  `enabled` tinyint(1) unsigned NOT NULL DEFAULT '1',			  `max_try` tinyint(3) unsigned NOT NULL DEFAULT '1',			  PRIMARY KEY (`id`),			  UNIQUE KEY `ref_name` (`ref_name`)			) ENGINE=InnoDB DEFAULT CHARSET=utf8		");		Database::instance()->query("			CREATE TABLE IF NOT EXISTS {$this->prefix}{$this->_tablePrefix}{$this->_tableNameConfirmation} (			  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,			  `form_id` mediumint(8) unsigned NOT NULL,			  `email` varchar(255) NOT NULL,			  `sid` varchar(50) NOT NULL,			  `created` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',			  `confirmed` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',			  `enabled` tinyint(1) unsigned NOT NULL DEFAULT '1',			  `max_try` tinyint(3) unsigned NOT NULL DEFAULT '1',			  `data` text NOT NULL,			  PRIMARY KEY (`id`),			  UNIQUE KEY `form_email` (`form_id`,`email`),			  UNIQUE KEY `form_sid` (`form_id`,`sid`)						) ENGINE=InnoDB DEFAULT CHARSET=utf8		");		$this->_inited = true;				}	public function __construct()	{		$this->prefix = $prefix = Database::instance()->table_prefix();;		$this->init();	}	public function saveConfirmation($confirmation)	{		Database::instance()->update($this->_tablePrefix . $this->_tableNameConfirmation, (array) $confirmation, array(			'id' => $confirmation->id		));	}		public function addForm($form, $maxTry = 1)	{		$data = array(			'ref_name' => $form['ref_name'],			'max_try' => $maxTry,		);		$this->_db->insert($this->_tablePrefix . $this->_tableNameForm, $data);			return $this->getFormByRefName($form['ref_name']);	}		public function getFormByRefName($refName)	{		if (!preg_match('/^[a-z0-9\_\.\-]+$/i', $refName))			throw new Exception('Bad ref_name');			/*		$db = Database::instance();		$query = $db->select ('*')		->from ('templatecategories_templates')		->where ('templatecategory_id >', TemplateCategory_Model::CUSTOM_CATEGORY)		->compile ();		$records = $db->query ($query);*/					$item = $this->_db			->query("SELECT * FROM {$this->prefix}{$this->_tablePrefix}{$this->_tableNameForm} WHERE `ref_name` = '{$refName}'")			->as_array()			;		if (isset($item[0]))			$item = $item[0];		return $item;	}		public function getServerRequestInfo()	{		$result = array();		$keys = array(			'REMOTE_ADDR', 'HTTP_USER_AGENT', 'HTTP_ACCEPT_LANGUAGE', 'REQUEST_TIME', 'HTTP_X_FORWARDED_FOR'		);		foreach($keys as $key)		if (isset($_SERVER[$key]))		{			$result[$key] = $_SERVER[$key];		}		return $result;	}		public function createConfirmationCode($form, $email, $data = array(), $step = 1)	{		if (!$form || !isset($form->id) || $form->id < 1)		{			throw new Exception('bad_form');		}		if (!preg_match('/^([a-z0-9_\.\-])+\@(([a-z0-9а-я\-])+\.)+([a-z0-9а-я]{2,6})$/i', $email))		{			throw new Exception('error_email_validation_fail');		}				try {			if (!isset($data['_cookie']))			{				$data['_cookie'] = $_COOKIE;				$data['_server'] = $this->getServerRequestInfo();			}					$sid = $this->generateUniqId();			Database::instance()->insert($this->_tablePrefix . $this->_tableNameConfirmation, array(				'form_id' => $form->id,				'email' => $email,				'sid' => $sid,				'max_try' => $form->max_try,				'created' => date('Y-m-d H:i:s'),				'data' => base64_encode(json_encode($data)),				'step' => $step,			));			return $sid;		}		catch(Exception $e)		{			if ($e->getCode() == 44)			{				return -1;			}		}		return 0;			}		public function isExistsEmail($formId, $email)	{		$db = $this->_db;		$query = $db->select ('*')			->from ($this->_tablePrefix . $this->_tableNameConfirmation)			->where (array('form_id' => $formId, 'email' => $email))			->limit(1)			->compile ();		$item = $db->query ($query)->as_array();		if (isset($item[0]))			$item = $item[0];		return !!($item);			}		public function getConfirmationByEmail($formId, $email)	{		$db = $this->_db;		$query = $db->select ('*')			->from ($this->_tablePrefix . $this->_tableNameConfirmation)			->where (array('form_id' => $formId, 'email' => $email))			->limit(1)			->compile ();		$item = $db->query ($query)->as_array();		if (isset($item[0]))			$item = $item[0];		return $item;			}			public function generateUniqId($sep = '-', $maxlen = 50)	{		$p = array();		$str = '';		$str .= microtime(1);		$str .= '|' . isset($_SERVER['REMOTE_ADDR']) ? $_SERVER['REMOTE_ADDR'] : '';		$str .= '|' . isset($_SERVER['HTTP_USER_AGENT']) ? $_SERVER['HTTP_USER_AGENT'] : '';		$p[] = md5($str);		$p[] = uniqid();		$sid = join($sep, $p);		$sid = substr($sid, -50);		return $sid;	}		/**	 * Route the request	 * @return bool	 */	public function route()	{	}	/**	 * Redirect in case of errors	 */	protected function redirect()	{	}	/**	 * @param string $email	 * @return array	 */	public function signup($email=null)	{		if (!isset($email))		{			if (!isset($_POST['email']))			{				return array('error' => 'Не отправлен email');			}			$email = $_POST['email'];		}		$existing = Database::instance()			->query("SELECT * FROM {$this->prefix}marafon where email='" . mysql_real_escape_string($email) . "'")			->as_array();		if (!$existing || !$existing[0]->confirmed)		{			if (!$existing)			{				Database::instance()->insert('marafon', array(					'email' => $email,					'created_at' => time(),				));				$id = Database::instance()					->query("SELECT LAST_INSERT_ID() as last_insert_id FROM {$this->prefix}marafon")					->as_array();				if (!$id)				{					return array('error' => 'Странная ошибка');				}				$id = $id[0]->last_insert_id;				$sid = $this->uniqid();				Database::instance()->update('marafon', array(					'sid' => $sid				), array(					'id' => $id				));			}			else			{				$sid = $existing[0]->sid;			}			$url = 'http://www.templatemonster.com/ru/marafon/confirm/?sid=' . $sid . '&email=' . $email;			return $this->sendEmail($email, 'Вы в шаге от доступа к секретным знаниям', "<html><head></head><body>Вы, или кто-то очень близкий и родной Вам отправил запрос на получение популярных вопросов,заданных в рамках марафона <a href='http://www.templatemonster.com/ru/marafon/'>'Интернет - это так просто'</a>.Если не передумали, то жмите на ссылку ниже:<br/><br/><a href='{$url}'>{$url}</a><br/><br/>После этого нужно будет просто снова проверить почту.<br/><br/>С уважением,<br/>команда экспертов<br/><a href='http://www.templatemonster.com/ru/marafon/'>Template Monster Russia</a></body></html>");			/*$r = mail($email, 'Вы в шаге от доступа к секретным знаниям', '  Вы, или кто-то очень близкий и родной Вам отправил запрос на получение популярных вопросов, заданных в рамках марафона "Интернет - это так просто" (http://www.templatemonster.com/ru/marafon/). Если не передумали, то жмите на ссылку ниже:http://www.templatemonster.com/ru/marafon/confirm/?sid=' . $sid . 'После этого нужно будет просто снова проверить почту.С уважением,команда экспертовTemplate Monster Russiahttp://www.templatemonster.com/ru/marafon/', 'From: ru@templatemonster.com');*/		}		return array('error' => 'Ищите ссылку на скачивание в вашем почтовом ящике');	}	/**	 * Confirm an email	 * @param string $email	 * @return array	 */	public function confirm($email = null)	{		if ($email === null)		{			// Create table			if (isset($_GET['sid']) && $_GET['sid'] == 'qyLJleIWekZ4eHBNFN7QXmMI39YYsq')			{				$this->init();				$this->redirect();			}			if (!isset($_GET['sid']) || !isset($_GET['email']))			{				$this->redirect();			}			$sid = $_GET['sid'];			$email = $_GET['email'];			$result = Database::instance()				->query("SELECT * FROM {$this->prefix}{$this->table} WHERE sid = '" . $sid . "'")				->as_array();			if (!$result)			{				return array('error' => 'Неизвестная ошибка!');			}			Database::instance()->update($this->table, array(				'confirmed' => 1,			), array(				'id' => $result[0]->id			));		}		else		{			$result = Database::instance()				->query("SELECT * FROM {$this->prefix}{$this->table} WHERE email = '" . $email . "'")				->as_array();			if (!$result || !$result[0]->sid)			{				$sid = $this->uniqid();				if ($result)				{					Database::instance()->update($this->table, array(						'confirmed' => 1,						'sid' => $sid					), array(						'id' => $result[0]->id					));				}				else				{					Database::instance()->insert($this->table, array(						'email' => $email,						'sid' => $sid,						'confirmed' => 1,						'created_at' => time(),					));				}			}			else			{				$sid = $result[0]->sid;			}		}		$url = 'http://www.templatemonster.com/ru/marafon/download/?sid=' . $sid;		$result = $this->sendEmail($email, '"Интернет - это так просто". Самые популярные вопросы марафона.', '<html><head></head><body>Поздравляем!<br/><br/>Теперь вам доступен самый полный список популярных вопросов, заданных в рамках марафона "Интернет - это так просто",и ответов на них наших экспертов. Верим, что желание учиться и познавать новое обязательно приведут вас к успеху.Скачать его вы можете по следующей ссылке:<br/><br/><a href="' . $url . '">' . $url . '</a><br/><br/>Кстати, если соберетесь делать <a href="http://www.templatemonster.com/ru/website-templates-type/">сайт</a>,<a href="http://www.templatemonster.com/ru/cms-blog-templates.html">блог</a> или<a href="http://www.templatemonster.com/ru/ecommerce-templates.html">интернет-магазин</a>, то помните, что готовые шаблоны отTemplateMonster Russia - это ваши лучшие друзья. Они отлично экономят нервы, время и деньги.<br/><br/>С уважением,<br/>команда экспертов<br/><a href="http://www.templatemonster.com/ru/marafon/">Template Monster Russia</a></body></html>');		echo 'Пожалуйста, проверьте свой почтовый ящик';		return array();	}	/**	 * Download the file	 * @return array	 */	public function download()	{		if (!isset($_GET['sid']) || $_GET['sid'] == '')		{			$this->sendFile();			return array();		}		$sid = $_GET['sid'];		$result = Database::instance()			->query("SELECT * FROM {$this->prefix}{$this->table} WHERE sid = '" . mysql_real_escape_string($sid) . "'")			->as_array();		if ($result)		{			Database::instance()->query("				UPDATE {$this->prefix}{$this->table}				SET `downloaded` = `downloaded` + 1				WHERE id = '" . $result[0]->id . "'			");			$this->sendFile();			return array();		}		return array();	}	protected function sendFile()	{		$file = CURRENT_THEME_DIR . 'data/top100.pdf';		if (file_exists($file))		{			header('Content-type: text/plain');			header('Content-Disposition: attachment; filename="top100.pdf"');			readfile($file);		}	}	/**	 * Send actual email	 * @param $email	 * @param $subject	 * @param $text	 * @return array	 */	protected function sendEmail($email, $subject, $text)	{		$mail = new Zend_Mail('UTF-8');		$mail->setFrom('ru@templatemonster.com');		$mail->addTo($email);		$mail->setSubject($subject);		$mail->setBodyHtml($text);		//$tr = new Zend_Mail_Transport_Sendmail();		//$tr = new Zend_Mail_Transport_Smtp();		$tr = null;		try		{			$mail->send($tr);			return array('success' => true);		}		catch (Exception $e)		{			return array('error' => 'Проблема при отправке email');		}	}	public function emails()	{		if (!isset($_GET['p']) || $_GET['p'] != 'aComrseRPaNKHeuqbzVx')			return false;		$emails = Database::instance()			->query("SELECT email FROM {$this->prefix}{$this->table} WHERE confirmed = 1")			->as_array();		$downloaded = Database::instance()			->query("SELECT email FROM {$this->prefix}{$this->table} WHERE downloaded > 0")			->as_array();		/*echo '<table>';		$i = 0;		foreach ($emails as $email)		{			echo '<tr><td>' . ++$i . '</td><td>' . $email->email . '</td></tr>';		}		echo '</table>';*/		return array('confirmed' => count($emails), 'downloaded' => count($downloaded));	}		/**	 * Get list emails	 * http://www.templatemonster.com/ru/marafon/getemails/?p=aComrseRPaNKHeuqbzVx	 */	public function getemails()	{		if (!isset($_GET['p']) || $_GET['p'] != 'aComrseRPaNKHeuqbzVx')			return false;		$emails = Database::instance()			->query("SELECT * FROM {$this->prefix}{$this->table} WHERE `confirmed` = 1")			->as_array();		echo '<pre>';		$i = 0;		foreach ($emails as $email)		{			$email->created_at = date('Y-m-d H:i:s', $email->created_at);			echo ++$i . "\t{$email->email}\t{$email->downloaded}\t{$email->created_at}\n";		}		echo "\n\n";		return;	}	public function getEmailsByForm($formId, $options = array())	{		$formId *=1;		/*		$db = Database::instance();		$query = $db->select ('*')			->from ($this->_tablePrefix . $this->_tableNameConfirmation)			->where (array('form_id' => $formId, 'confirmed' => 1))			->compile ();		$emails = $db->query ($query)->as_array();		*/		$query = "SELECT * FROM " . $this->prefix . $this->_tablePrefix . $this->_tableNameConfirmation . " WHERE form_id = " . $formId;//		$query .= " AND confirmed != '0000-00-00 00:00:00'";				$emails = Database::instance()			->query($query)			->as_array();						return $emails;	}		public function getCountEmailsByForm($formId, $options = array())	{		$formId *=1;		$query = "SELECT COUNT(*) AS `count` FROM " . $this->prefix . $this->_tablePrefix . $this->_tableNameConfirmation . " WHERE form_id = " . $formId;		if (isset($options['confirmed']))		{			$query .= " AND confirmed " . ($options['confirmed'] ? '!' : '') . "= '0000-00-00 00:00:00'";		}				$emails = Database::instance()			->query($query)			->as_array();						return $emails;	}		}